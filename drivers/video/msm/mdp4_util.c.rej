--- drivers/video/msm/mdp4_util.c
+++ drivers/video/msm/mdp4_util.c
@@ -545,7 +544,7 @@
 		mdp_intr_mask &= ~INTR_DMA_E_DONE;
 		outp32(MDP_INTR_ENABLE, mdp_intr_mask);
 		dma->busy = FALSE;
-		mdp4_dma_e_done_dtv();
+
 		if (dma->waiting) {
 			dma->waiting = FALSE;
 			complete(&dma->comp);
@@ -2358,32 +2288,9 @@
 		output |= temp;
 		mask = 0x08 | 0x1800;
 		break;
-	case MDP_BLOCK_DMA_S:
-		base = 0xA0028;
-		output = (config->csc_data.flags << 3) & (0x08);
-		temp = (config->csc_data.flags << 10) & (0x1800);
-		output |= temp;
-		mask = 0x08 | 0x1800;
-		break;
 	case MDP_BLOCK_VG_1:
-		base = 0x20058;
-		output = (config->csc_data.flags << 11) & (0x800);
-		temp = (config->csc_data.flags << 8) & (0x600);
-		output |= temp;
-		mask = 0x800 | 0x600;
-		break;
 	case MDP_BLOCK_VG_2:
-		base = 0x30058;
-		output = (config->csc_data.flags << 11) & (0x800);
-		temp = (config->csc_data.flags << 8) & (0x600);
-		output |= temp;
-		mask = 0x800 | 0x600;
-		break;
 	case MDP_BLOCK_OVERLAY_1:
-		base = 0x18200;
-		output = config->csc_data.flags;
-		mask = 0x07;
-		break;
 	default:
 		pr_err("%s - CSC block does not exist on MDP_BLOCK = %d\n",
 						__func__, config->block);
@@ -2538,522 +2442,3 @@
 	}
 	buf->phys_addr = 0;
 }
-
-static int mdp4_update_pcc_regs(uint32_t offset,
-				struct mdp_pcc_cfg_data *cfg_ptr)
-{
-	int ret = -1;
-
-	if (offset && cfg_ptr) {
-
-		outpdw(offset, cfg_ptr->r.c);
-		outpdw(offset + 0x30, cfg_ptr->g.c);
-		outpdw(offset + 0x60, cfg_ptr->b.c);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.r);
-		outpdw(offset + 0x30, cfg_ptr->g.r);
-		outpdw(offset + 0x60, cfg_ptr->b.r);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.g);
-		outpdw(offset + 0x30, cfg_ptr->g.g);
-		outpdw(offset + 0x60, cfg_ptr->b.g);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.b);
-		outpdw(offset + 0x30, cfg_ptr->g.b);
-		outpdw(offset + 0x60, cfg_ptr->b.b);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.rr);
-		outpdw(offset + 0x30, cfg_ptr->g.rr);
-		outpdw(offset + 0x60, cfg_ptr->b.rr);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.gg);
-		outpdw(offset + 0x30, cfg_ptr->g.gg);
-		outpdw(offset + 0x60, cfg_ptr->b.gg);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.bb);
-		outpdw(offset + 0x30, cfg_ptr->g.bb);
-		outpdw(offset + 0x60, cfg_ptr->b.bb);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.rg);
-		outpdw(offset + 0x30, cfg_ptr->g.rg);
-		outpdw(offset + 0x60, cfg_ptr->b.rg);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.gb);
-		outpdw(offset + 0x30, cfg_ptr->g.gb);
-		outpdw(offset + 0x60, cfg_ptr->b.gb);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.rb);
-		outpdw(offset + 0x30, cfg_ptr->g.rb);
-		outpdw(offset + 0x60, cfg_ptr->b.rb);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.rgb_0);
-		outpdw(offset + 0x30, cfg_ptr->g.rgb_0);
-		outpdw(offset + 0x60, cfg_ptr->b.rgb_0);
-		offset += 4;
-
-		outpdw(offset, cfg_ptr->r.rgb_1);
-		outpdw(offset + 0x30, cfg_ptr->g.rgb_1);
-		outpdw(offset + 0x60, cfg_ptr->b.rgb_1);
-
-		ret = 0;
-	}
-
-	return ret;
-}
-
-static int mdp4_read_pcc_regs(uint32_t offset,
-				struct mdp_pcc_cfg_data *cfg_ptr)
-{
-	int ret = -1;
-
-	if (offset && cfg_ptr) {
-		cfg_ptr->r.c = inpdw(offset);
-		cfg_ptr->g.c = inpdw(offset + 0x30);
-		cfg_ptr->b.c = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.r = inpdw(offset);
-		cfg_ptr->g.r = inpdw(offset + 0x30);
-		cfg_ptr->b.r = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.g = inpdw(offset);
-		cfg_ptr->g.g = inpdw(offset + 0x30);
-		cfg_ptr->b.g = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.b = inpdw(offset);
-		cfg_ptr->g.b = inpdw(offset + 0x30);
-		cfg_ptr->b.b = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.rr = inpdw(offset);
-		cfg_ptr->g.rr = inpdw(offset + 0x30);
-		cfg_ptr->b.rr = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.gg = inpdw(offset);
-		cfg_ptr->g.gg = inpdw(offset + 0x30);
-		cfg_ptr->b.gg = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.bb = inpdw(offset);
-		cfg_ptr->g.bb = inpdw(offset + 0x30);
-		cfg_ptr->b.bb = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.rg = inpdw(offset);
-		cfg_ptr->g.rg = inpdw(offset + 0x30);
-		cfg_ptr->b.rg = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.gb = inpdw(offset);
-		cfg_ptr->g.gb = inpdw(offset + 0x30);
-		cfg_ptr->b.gb = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.rb = inpdw(offset);
-		cfg_ptr->g.rb = inpdw(offset + 0x30);
-		cfg_ptr->b.rb = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.rgb_0 = inpdw(offset);
-		cfg_ptr->g.rgb_0 = inpdw(offset + 0x30);
-		cfg_ptr->b.rgb_0 = inpdw(offset + 0x60);
-		offset += 4;
-
-		cfg_ptr->r.rgb_1 = inpdw(offset);
-		cfg_ptr->g.rgb_1 = inpdw(offset + 0x30);
-		cfg_ptr->b.rgb_1 = inpdw(offset + 0x60);
-
-		ret = 0;
-	}
-
-	return ret;
-}
-
-#define MDP_DMA_P_BASE 0x90000
-#define MDP_DMA_S_BASE 0xA0000
-
-#define MDP_PCC_OFFSET 0xA000
-
-#define MDP_DMA_P_OP_MODE_OFFSET 0x70
-#define MDP_DMA_S_OP_MODE_OFFSET 0x28
-
-
-#define DMA_PCC_R2_OFFSET 0x100
-
-int mdp4_pcc_cfg(struct mdp_pcc_cfg_data *cfg_ptr)
-{
-	int ret = -1;
-	uint32_t pcc_offset = 0, mdp_cfg_offset = 0;
-	uint32_t mdp_dma_op_mode = 0;
-
-	switch (cfg_ptr->block) {
-	case MDP_BLOCK_DMA_P:
-		pcc_offset = (uint32_t) (MDP_BASE + MDP_DMA_P_BASE \
-				+ MDP_PCC_OFFSET);
-		mdp_cfg_offset = (uint32_t)(MDP_BASE + MDP_DMA_P_BASE);
-		mdp_dma_op_mode = (uint32_t)(MDP_BASE + MDP_DMA_P_BASE \
-				+ MDP_DMA_P_OP_MODE_OFFSET);
-		break;
-
-	case MDP_BLOCK_DMA_S:
-		pcc_offset = (uint32_t)(MDP_BASE + MDP_DMA_S_BASE \
-				+ MDP_PCC_OFFSET);
-		mdp_cfg_offset = (uint32_t)(MDP_BASE + MDP_DMA_S_BASE);
-		mdp_dma_op_mode = (uint32_t)(MDP_BASE + MDP_DMA_S_BASE \
-				+ MDP_DMA_S_OP_MODE_OFFSET);
-		break;
-
-	default:
-		break;
-	}
-
-	if (0x8 & cfg_ptr->ops)
-		pcc_offset += DMA_PCC_R2_OFFSET;
-
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_ON, FALSE);
-
-	switch ((0x6 & cfg_ptr->ops)>>1) {
-	case 0x1:
-		ret = mdp4_read_pcc_regs(pcc_offset, cfg_ptr);
-		break;
-
-	case 0x2:
-		ret = mdp4_update_pcc_regs(pcc_offset, cfg_ptr);
-		break;
-
-	default:
-		break;
-	}
-
-	if (0x8 & cfg_ptr->ops)
-		outpdw(mdp_dma_op_mode,
-			(inpdw(mdp_dma_op_mode)|((0x8&cfg_ptr->ops)<<10)));
-
-	outpdw(mdp_cfg_offset,
-			(inpdw(mdp_cfg_offset)|((cfg_ptr->ops&0x1)<<29)));
-
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_OFF, FALSE);
-
-	return ret;
-}
-
-#define MDP_DMA_GC_OFFSET 0x8800
-
-#define MDP_LM_0_BASE 0x10004
-#define MDP_LM_1_BASE 0x18004
-#define MDP_LM_GC_OFFSET 0x47ec
-
-#define MDP_LM_OP_MODE_OFFSET 0x10
-
-#define MDP_DMA_P_CONFIG_OFFSET MDP_DMA_P_BASE
-#define MDP_DMA_S_CONFIG_OFFSET MDP_DMA_S_BASE
-#define MDP_LM_0_OP_MODE_OFFSET (MDP_LM_0_BASE + MDP_LM_OP_MODE_OFFSET)
-#define MDP_LM_1_OP_MODE_OFFSET (MDP_LM_1_BASE + MDP_LM_OP_MODE_OFFSET)
-
-#define MDP_GC_COLOR_OFFSET	0x100
-#define MDP_GC_PARMS_OFFSET	0x80
-
-#define MDP_AR_GC_MAX_STAGES	16
-
-static int update_ar_gc_lut(uint32_t *offset, struct mdp_pgc_lut_data *lut_data)
-{
-	int ret = -1, count = 0;
-
-	uint32_t *c0_offset = offset;
-	uint32_t *c0_params_offset = (uint32_t *)((uint32_t)c0_offset
-							+ MDP_GC_PARMS_OFFSET);
-
-	uint32_t *c1_offset = (uint32_t *)((uint32_t)offset
-							+ MDP_GC_COLOR_OFFSET);
-
-	uint32_t *c1_params_offset = (uint32_t *)((uint32_t)c1_offset
-							+ MDP_GC_PARMS_OFFSET);
-
-	uint32_t *c2_offset = (uint32_t *)((uint32_t)offset
-						+ 2*MDP_GC_COLOR_OFFSET);
-
-	uint32_t *c2_params_offset = (uint32_t *)((uint32_t)c2_offset
-						+MDP_GC_PARMS_OFFSET);
-
-
-	for (count = 0; count < MDP_AR_GC_MAX_STAGES; count++) {
-		if (count < lut_data->num_r_stages) {
-			outpdw(c0_offset+count,
-				((0xfff & lut_data->r_data[count].x_start)
-					| 0x10000));
-
-			outpdw(c0_params_offset+count,
-				((0x7fff & lut_data->r_data[count].slope)
-					| ((0xffff
-					& lut_data->r_data[count].offset)
-						<< 16)));
-		} else
-			outpdw(c0_offset+count, 0);
-
-		if (count < lut_data->num_b_stages) {
-			outpdw(c1_offset+count,
-				((0xfff & lut_data->b_data[count].x_start)
-					| 0x10000));
-
-			outpdw(c1_params_offset+count,
-				((0x7fff & lut_data->b_data[count].slope)
-					| ((0xffff
-					& lut_data->b_data[count].offset)
-						<< 16)));
-		} else
-			outpdw(c1_offset+count, 0);
-
-		if (count < lut_data->num_g_stages) {
-			outpdw(c2_offset+count,
-				((0xfff & lut_data->g_data[count].x_start)
-					| 0x10000));
-
-			outpdw(c2_params_offset+count,
-				((0x7fff & lut_data->g_data[count].slope)
-				| ((0xffff
-				& lut_data->g_data[count].offset)
-					<< 16)));
-		} else
-			outpdw(c2_offset+count, 0);
-	}
-
-	ret = 0;
-
-	return ret;
-}
-
-int mdp4_pgc_cfg(struct mdp_pgc_lut_data *pgc_ptr)
-{
-	int ret = 0;
-	uint32_t *offset = 0, *pgc_enable_offset = 0, lshift_bits = 0;
-	struct mdp_ar_gc_lut_data r[MDP_AR_GC_MAX_STAGES];
-	struct mdp_ar_gc_lut_data g[MDP_AR_GC_MAX_STAGES];
-	struct mdp_ar_gc_lut_data b[MDP_AR_GC_MAX_STAGES];
-
-	ret = copy_from_user(&r[0], pgc_ptr->r_data,
-		pgc_ptr->num_r_stages*sizeof(struct mdp_ar_gc_lut_data));
-	if (!ret) {
-		ret = copy_from_user(&g[0],
-			pgc_ptr->g_data,
-			pgc_ptr->num_g_stages
-			* sizeof(struct mdp_ar_gc_lut_data));
-		if (!ret)
-			ret = copy_from_user(&b[0],
-			pgc_ptr->b_data,
-			pgc_ptr->num_b_stages
-			* sizeof(struct mdp_ar_gc_lut_data));
-	}
-
-	if (ret)
-		return ret;
-
-	pgc_ptr->r_data = &r[0];
-	pgc_ptr->g_data = &g[0];
-	pgc_ptr->b_data = &b[0];
-
-	switch (pgc_ptr->block) {
-	case MDP_BLOCK_DMA_P:
-		offset = (uint32_t *)(MDP_BASE + MDP_DMA_P_BASE
-					+ MDP_DMA_GC_OFFSET);
-		pgc_enable_offset = (uint32_t *)(MDP_BASE
-					+ MDP_DMA_P_CONFIG_OFFSET);
-		lshift_bits = 28;
-		break;
-
-	case MDP_BLOCK_DMA_S:
-		offset = (uint32_t *)(MDP_BASE + MDP_DMA_S_BASE
-					+  MDP_DMA_GC_OFFSET);
-		pgc_enable_offset = (uint32_t *)(MDP_BASE
-					+ MDP_DMA_S_CONFIG_OFFSET);
-		lshift_bits = 28;
-		break;
-
-	case MDP_BLOCK_OVERLAY_0:
-		offset = (uint32_t *)(MDP_BASE + MDP_LM_0_BASE
-					+ MDP_LM_GC_OFFSET);
-		pgc_enable_offset = (uint32_t *)(MDP_BASE
-					+ MDP_LM_0_OP_MODE_OFFSET);
-		lshift_bits = 2;
-		break;
-
-	case MDP_BLOCK_OVERLAY_1:
-		offset = (uint32_t *)(MDP_BASE + MDP_LM_1_BASE
-					+ MDP_LM_GC_OFFSET);
-		pgc_enable_offset = (uint32_t *)(MDP_BASE
-					+ MDP_LM_0_OP_MODE_OFFSET);
-		lshift_bits = 2;
-		break;
-
-	default:
-		ret = -1;
-		break;
-	}
-
-	if (!ret) {
-		mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_ON, FALSE);
-
-		ret = update_ar_gc_lut(offset, pgc_ptr);
-		if (!ret)
-			outpdw(pgc_enable_offset, (inpdw(pgc_enable_offset)
-						|(1<<lshift_bits)));
-
-		mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_OFF, FALSE);
-	}
-
-	return ret;
-}
-
-static uint32_t mdp4_pp_block2igc(uint32_t block)
-{
-	uint32_t valid = 0;
-	switch (block) {
-	case MDP_BLOCK_VG_1:
-		valid = 0x1;
-		break;
-	case MDP_BLOCK_VG_2:
-		valid = 0x1;
-		break;
-	case MDP_BLOCK_RGB_1:
-		valid = 0x1;
-		break;
-	case MDP_BLOCK_RGB_2:
-		valid = 0x1;
-		break;
-	case MDP_BLOCK_DMA_P:
-		valid = (mdp_rev >= MDP_REV_40) ? 1 : 0;
-		break;
-	case MDP_BLOCK_DMA_S:
-		valid = (mdp_rev >= MDP_REV_40) ? 1 : 0;
-		break;
-	default:
-		break;
-	}
-	return valid;
-}
-
-static int mdp4_igc_lut_write(struct mdp_igc_lut_data *cfg, uint32_t en_off,
-		uint32_t lut_off)
-{
-	int i;
-	uint32_t base, *off_low, *off_high;
-	uint32_t low[cfg->len];
-	uint32_t high[cfg->len];
-
-	base = mdp_block2base(cfg->block);
-
-	if (cfg->len != 256)
-		return -EINVAL;
-
-	off_low = (uint32_t *)(MDP_BASE + base + lut_off);
-	off_high = (uint32_t *)(MDP_BASE + base + lut_off + 0x800);
-	if (copy_from_user(&low, cfg->c0_c1_data, cfg->len * sizeof(uint32_t)))
-		return -EFAULT;
-	if (copy_from_user(&high, cfg->c2_data, cfg->len * sizeof(uint32_t)))
-		return -EFAULT;
-
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_ON, FALSE);
-	for (i = 0; i < cfg->len; i++) {
-		MDP_OUTP(off_low++, low[i]);
-		/*low address write should occur before high address write*/
-		wmb();
-		MDP_OUTP(off_high++, high[i]);
-	}
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_OFF, FALSE);
-	return 0;
-}
-
-static int mdp4_igc_lut_ctrl(struct mdp_igc_lut_data *cfg)
-{
-	uint32_t mask, out;
-	uint32_t base = mdp_block2base(cfg->block);
-	int8_t shift = 0;
-
-	switch (cfg->block) {
-	case MDP_BLOCK_DMA_P:
-	case MDP_BLOCK_DMA_S:
-		base = base;
-		shift = 30;
-		break;
-	case MDP_BLOCK_VG_1:
-	case MDP_BLOCK_VG_2:
-	case MDP_BLOCK_RGB_1:
-	case MDP_BLOCK_RGB_2:
-		base += 0x58;
-		shift = 16;
-		break;
-	default:
-		return -EINVAL;
-
-	}
-	out = 1<<shift;
-	mask = ~out;
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_ON, FALSE);
-	out = inpdw(MDP_BASE + base) & mask;
-	MDP_OUTP(MDP_BASE + base, out | ((cfg->ops & 0x1)<<shift));
-	mdp_pipe_ctrl(MDP_CMD_BLOCK, MDP_BLOCK_POWER_OFF, FALSE);
-
-	return 0;
-}
-
-static int mdp4_igc_lut_write_cfg(struct mdp_igc_lut_data *cfg)
-{
-	int ret = 0;
-
-	switch (cfg->block) {
-	case MDP_BLOCK_DMA_P:
-	case MDP_BLOCK_DMA_S:
-		ret = mdp4_igc_lut_write(cfg, 0x00, 0x9000);
-		break;
-	case MDP_BLOCK_VG_1:
-	case MDP_BLOCK_VG_2:
-	case MDP_BLOCK_RGB_1:
-	case MDP_BLOCK_RGB_2:
-		ret = mdp4_igc_lut_write(cfg, 0x58, 0x5000);
-		break;
-	default:
-		ret = -EINVAL;
-	}
-
-	return ret;
-}
-
-int mdp4_igc_lut_config(struct mdp_igc_lut_data *cfg)
-{
-	int ret = 0;
-
-	if (!mdp4_pp_block2igc(cfg->block)) {
-		ret = -ENOTTY;
-		goto error;
-	}
-
-	switch ((cfg->ops & 0x6) >> 1) {
-	case 0x1:
-		pr_info("%s: IGC LUT read not supported\n", __func__);
-		break;
-	case 0x2:
-		ret = mdp4_igc_lut_write_cfg(cfg);
-		if (ret)
-			goto error;
-		break;
-	default:
-		break;
-	}
-
-	ret = mdp4_igc_lut_ctrl(cfg);
-
-error:
-	return ret;
-}
