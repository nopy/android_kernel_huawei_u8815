--- drivers/video/msm/msm_fb.c
+++ drivers/video/msm/msm_fb.c
@@ -41,22 +41,46 @@
 #include <linux/leds.h>
 #include <linux/pm_runtime.h>
 
+
 #define MSM_FB_C
 #include "msm_fb.h"
 #include "mddihosti.h"
 #include "tvenc.h"
 #include "mdp.h"
 #include "mdp4.h"
+/*add the code for dynamic gamma function  */
+#ifdef CONFIG_FB_DYNAMIC_GAMMA
+#include <linux/hardware_self_adapt.h>
+#endif
+#ifdef CONFIG_HUAWEI_KERNEL
+#include "hw_lcd_common.h"
+#endif
 
+#ifdef CONFIG_HUAWEI_EVALUATE_POWER_CONSUMPTION 
+#include <mach/msm_battery.h>
+#endif
 #ifdef CONFIG_FB_MSM_LOGO
+#ifndef CONFIG_HUAWEI_KERNEL
 #define INIT_IMAGE_FILE "/initlogo.rle"
 extern int load_565rle_image(char *filename);
+#else
+#define INIT_IMAGE_FILE	"/initlogo.rle"
+extern int load_888rle_image(char *filename);
+#endif
 #endif
 
 #ifdef CONFIG_FB_MSM_TRIPLE_BUFFER
+/* increase three framebuffers to four */
+#ifdef CONFIG_ARCH_MSM7X27A
+#define MSM_FB_NUM	4
+#else
 #define MSM_FB_NUM	3
 #endif
-
+#endif
+/*add the code for dynamic gamma function  */
+#ifdef CONFIG_FB_DYNAMIC_GAMMA
+extern int nt35560_dimytic_gamma_setting_gamma(int);
+#endif
 static unsigned char *fbram;
 static unsigned char *fbram_phys;
 static int fbram_size;
@@ -108,7 +132,13 @@
 static int msm_fb_ioctl(struct fb_info *info, unsigned int cmd,
 			unsigned long arg);
 static int msm_fb_mmap(struct fb_info *info, struct vm_area_struct * vma);
-
+/*function declare*/
+#ifdef CONFIG_FB_AUTO_CABC
+int msm_fb_config_cabc(struct msm_fb_data_type *mfd, struct msmfb_cabc_config cabc_cfg);
+#endif
+#ifdef CONFIG_FB_DYNAMIC_GAMMA
+int msm_fb_set_dynamic_gamma(struct msm_fb_data_type *mfd, enum danymic_gamma_mode gamma_mode);
+#endif
 #ifdef MSM_FB_ENABLE_DBGFS
 
 #define MSM_FB_MAX_DBGFS 1024
@@ -745,23 +823,30 @@
 }
 #endif
 
+/* Remove qcom backlight mechanism,user our own */
+#ifndef CONFIG_HUAWEI_KERNEL
 static int unset_bl_level, bl_updated;
+#endif
 static int bl_level_old;
 
 void msm_fb_set_backlight(struct msm_fb_data_type *mfd, __u32 bkl_lvl)
 {
 	struct msm_fb_panel_data *pdata;
 
+/* Remove qcom backlight mechanism,user our own */
+#ifndef CONFIG_HUAWEI_KERNEL
 	if (!mfd->panel_power_on || !bl_updated) {
 		unset_bl_level = bkl_lvl;
 		return;
 	} else {
 		unset_bl_level = 0;
 	}
+#endif
 
 	pdata = (struct msm_fb_panel_data *)mfd->pdev->dev.platform_data;
 
 	if ((pdata) && (pdata->set_backlight)) {
+#ifndef CONFIG_HUAWEI_KERNEL
 		down(&mfd->sem);
 		if (bl_level_old == bkl_lvl) {
 			up(&mfd->sem);
@@ -956,6 +1166,9 @@
 				mfd->panel_power_on = curr_pwr_state;
 
 			mfd->op_enable = TRUE;
+#ifdef CONFIG_HUAWEI_KERNEL
+			lcd_have_resume = FALSE;
+#endif
 		}
 		break;
 	}
@@ -1367,7 +1580,9 @@
 	fbi->screen_base = fbram;
 	fbi->fix.smem_start = (unsigned long)fbram_phys;
 
-	memset(fbi->screen_base, 0x0, fix->smem_len);
+#ifndef CONFIG_HUAWEI_KERNEL
+    memset(fbi->screen_base, 0x0, fix->smem_len);
+#endif
 
 	mfd->op_enable = TRUE;
 	mfd->panel_power_on = FALSE;
@@ -1412,7 +1627,11 @@
 	     mfd->index, fbi->var.xres, fbi->var.yres, fbi->fix.smem_len);
 
 #ifdef CONFIG_FB_MSM_LOGO
+#ifndef CONFIG_HUAWEI_KERNEL
 	if (!load_565rle_image(INIT_IMAGE_FILE)) ;	/* Flip buffer */
+#else
+	if (!load_888rle_image(INIT_IMAGE_FILE)) ;	/* Flip buffer */
+#endif
 #endif
 	ret = 0;
 
@@ -1616,6 +1835,9 @@
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
 	struct msm_fb_panel_data *pdata;
 
+#ifdef CONFIG_HUAWEI_KERNEL
+    static bool is_first_frame = TRUE;
+#endif
 	if ((!mfd->op_enable) || (!mfd->panel_power_on))
 		return -EPERM;
 
@@ -3141,56 +3420,6 @@
 	return 0;
 }
 
-static int msmfb_handle_pp_ioctl(struct msmfb_mdp_pp *pp_ptr)
-{
-	int ret = -1;
-
-	if (!pp_ptr)
-		return ret;
-
-	switch (pp_ptr->op) {
-#ifdef CONFIG_FB_MSM_MDP40
-	case mdp_op_csc_cfg:
-		ret = mdp4_csc_config(&(pp_ptr->data.csc_cfg_data));
-		break;
-
-	case mdp_op_pcc_cfg:
-		ret = mdp4_pcc_cfg(&(pp_ptr->data.pcc_cfg_data));
-		break;
-
-	case mdp_op_lut_cfg:
-		switch (pp_ptr->data.lut_cfg_data.lut_type) {
-		case mdp_lut_igc:
-			ret = mdp4_igc_lut_config(
-					(struct mdp_igc_lut_data *)
-					&pp_ptr->data.lut_cfg_data.data);
-			break;
-
-		case mdp_lut_pgc:
-			ret = mdp4_pgc_cfg(
-				&pp_ptr->data.lut_cfg_data.data.pgc_lut_data);
-			break;
-
-		case mdp_lut_hist:
-			ret = mdp_hist_lut_config(
-					(struct mdp_hist_lut_data *)
-					&pp_ptr->data.lut_cfg_data.data);
-			break;
-
-		default:
-			break;
-		}
-		break;
-#endif
-	default:
-		pr_warn("Unsupported request to MDP_PP IOCTL.\n");
-		ret = -EINVAL;
-		break;
-	}
-
-	return ret;
-}
-
 static int msm_fb_ioctl(struct fb_info *info, unsigned int cmd,
 			unsigned long arg)
 {
@@ -3199,6 +3428,9 @@
 	struct fb_cursor cursor;
 	struct fb_cmap cmap;
 	struct mdp_histogram hist;
+#ifdef CONFIG_FB_DYNAMIC_GAMMA
+	int gamma_setting_value;
+#endif
 #ifndef CONFIG_FB_MSM_MDP40
 	struct mdp_ccs ccs_matrix;
 #else
@@ -3484,15 +3716,98 @@
 		ret = -EINVAL;
 #endif
 		break;
-
 	case MSMFB_MDP_PP:
 		ret = copy_from_user(&mdp_pp, argp, sizeof(mdp_pp));
 		if (ret)
 			return ret;
 
-		ret = msmfb_handle_pp_ioctl(&mdp_pp);
+		switch (mdp_pp.op) { /*Add PCC and LUT op handling here*/
+#ifdef CONFIG_FB_MSM_MDP40
+		case mdp_op_csc_cfg:
+			ret = mdp4_csc_config((struct mdp_csc_cfg_data *)
+					&(mdp_pp.data));
+			break;
+		case mdp_op_pcc_cfg:
+		case mdp_op_lut_cfg:
+#endif
+		default:
+			pr_warn("%s: Only CSC supported by MDP_PP IOCTL.\n",
+					__func__);
+			ret = -EINVAL;
+			break;
+		}
+
 		break;
+/* add for dynamic gamma function begin*/ 
+#ifdef CONFIG_FB_DYNAMIC_GAMMA
+    case MSMFB_DYNAMIC_GAMMA:
+        if (is_panel_support_dynamic_gamma())
+        {
+            ret = copy_from_user(&gamma_setting_value, argp, sizeof(gamma_setting_value));
+            if (ret)
+            {
+                printk(KERN_ERR
+                    "%s:MSMFB_DYNAMIC_GAMMA ioctl failed \n",
+                     __func__);
+                return ret;
+            }
+			if(FALSE == lcd_have_resume)
+			{
+				/* backup gamma_mode that want to set */
+				last_gamma_mode = gamma_setting_value;
+				last_gamma_setting = TRUE;
+                printk(KERN_ERR
+                    "%s:MSMFB_DYNAMIC_GAMMA ioctl failed \n",
+                     __func__);
+			}
+			else
+			{
+				ret = msm_fb_set_dynamic_gamma(mfd, gamma_setting_value);
+				last_gamma_setting = FALSE;
+			}
+        }
+        else
+        {
+            MSM_FB_INFO("This panel can not support dynamic gamma function");
+        }
+		break;
+#endif
+#ifdef CONFIG_FB_AUTO_CABC
+    case MSMFB_AUTO_CABC:
+        if (is_panel_support_auto_cabc())
+        {
+            struct msmfb_cabc_config cabc_cfg;
+
+            ret = copy_from_user(&cabc_cfg, argp, sizeof(cabc_cfg));
+            if (ret)
+            {
+                printk(KERN_ERR
+                    "%s:MSMFB_AUTO_CABC ioctl failed \n",
+                     __func__);
+                return ret;
+            }
+			if(FALSE == lcd_have_resume)
+			{
+				/* backup gamma_mode that want to set */
+				last_cabc_mode = cabc_cfg;
+				last_cabc_setting =TRUE;
+                printk(KERN_ERR
+                    "%s:MSMFB_AUTO_CABC ioctl failed \n",
+                     __func__);
+			}
+			else
+			{
+				ret = msm_fb_config_cabc(mfd, cabc_cfg);
+				last_cabc_setting =FALSE;
+			}
 
+        }
+        else
+        {
+            MSM_FB_INFO("This panel can not support auto cabc function");
+        }
+        break;
+#endif
 	default:
 		MSM_FB_INFO("MDP: unknown ioctl (cmd=%x) received!\n", cmd);
 		ret = -EINVAL;
@@ -3707,8 +4028,16 @@
 		}
 	}
 #endif
-
+#ifdef CONFIG_HUAWEI_EVALUATE_POWER_CONSUMPTION 
+    /*init lcd consume notify timer */
+	setup_timer(&bright_timer, light_notify_timer_func, 0);
+	/*init lcd consume notify work */
+	INIT_WORK(&light_notify_work, light_notify_work_func);  
+#endif
 	return 0;
 }
 
 module_init(msm_fb_init);
+#ifdef CONFIG_HUAWEI_EVALUATE_POWER_CONSUMPTION 
+module_exit(msm_fb_exit);
+#endif
